// <auto-generated />
using System; // Importing the System namespace for basic functionalities
using LoRinoBackend.Models; // Importing the namespace containing the model classes
using Microsoft.EntityFrameworkCore; // Importing the namespace for Entity Framework Core
using Microsoft.EntityFrameworkCore.Infrastructure; // Importing the namespace for EF Core infrastructure
using Microsoft.EntityFrameworkCore.Metadata; // Importing the namespace for EF Core metadata
using Microsoft.EntityFrameworkCore.Storage.ValueConversion; // Importing the namespace for EF Core value conversions

#nullable disable

namespace LoRinoBackend.Migrations
{
    [DbContext(typeof(AppDbContext))] // Attribute to specify the DbContext type
    partial class AppDbContextModelSnapshot : ModelSnapshot // Partial class representing the database model snapshot
    {
        // Method to build the model using the ModelBuilder
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6") // Setting the product version of EF Core
                .HasAnnotation("Relational:MaxIdentifierLength", 64); // Setting the max identifier length

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder); // Custom extension method to handle auto-increment columns for MySQL

            // Defining the ApplicationUser entity with its properties and configurations
            modelBuilder.Entity("LoRinoBackend.Models.ApplicationUser", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("varchar(255)"); // Setting the Id property with column type

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("int"); // Setting the AccessFailedCount property

                b.Property<string>("City")
                    .HasColumnType("longtext"); // Setting the City property

                b.Property<int?>("CompanyId")
                    .HasColumnType("int"); // Setting the CompanyId property

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("longtext"); // Setting the ConcurrencyStamp property as concurrency token

                b.Property<string>("Country")
                    .HasColumnType("longtext"); // Setting the Country property

                b.Property<string>("Email")
                    .HasMaxLength(256)
                    .HasColumnType("varchar(256)"); // Setting the Email property with max length

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("tinyint(1)"); // Setting the EmailConfirmed property

                b.Property<string>("FirstName")
                    .HasColumnType("longtext"); // Setting the FirstName property

                b.Property<string>("LastName")
                    .HasColumnType("longtext"); // Setting the LastName property

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("tinyint(1)"); // Setting the LockoutEnabled property

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("datetime(6)"); // Setting the LockoutEnd property

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256)
                    .HasColumnType("varchar(256)"); // Setting the NormalizedEmail property with max length

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256)
                    .HasColumnType("varchar(256)"); // Setting the NormalizedUserName property with max length

                b.Property<string>("PasswordHash")
                    .HasColumnType("longtext"); // Setting the PasswordHash property

                b.Property<string>("PhoneNumber")
                    .HasColumnType("longtext"); // Setting the PhoneNumber property

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("tinyint(1)"); // Setting the PhoneNumberConfirmed property

                b.Property<string>("SecurityStamp")
                    .HasColumnType("longtext"); // Setting the SecurityStamp property

                b.Property<string>("Streeet")
                    .HasColumnType("longtext"); // Setting the Street property

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("tinyint(1)"); // Setting the TwoFactorEnabled property

                b.Property<string>("UserName")
                    .HasMaxLength(256)
                    .HasColumnType("varchar(256)"); // Setting the UserName property with max length

                b.HasKey("Id"); // Defining the primary key

                b.HasIndex("CompanyId"); // Defining an index on CompanyId

                b.HasIndex("NormalizedEmail")
                    .HasDatabaseName("EmailIndex"); // Defining an index on NormalizedEmail with a custom name

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasDatabaseName("UserNameIndex"); // Defining a unique index on NormalizedUserName with a custom name

                b.ToTable("AspNetUsers", (string)null); // Mapping to the AspNetUsers table
            });

            // Defining the Cluster entity with its properties and configurations
            modelBuilder.Entity("LoRinoBackend.Models.Cluster", b =>
            {
                b.Property<int?>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int"); // Setting the Id property with auto-increment

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int?>("Id")); // Setting MySQL identity column

                b.Property<int?>("ClusterId")
                    .HasColumnType("int"); // Setting the ClusterId property

                b.HasKey("Id"); // Defining the primary key

                b.ToTable("Cluster"); // Mapping to the Cluster table
            });

            // Defining the Company entity with its properties and configurations
            modelBuilder.Entity("LoRinoBackend.Models.Company", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int"); // Setting the Id property with auto-increment

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id")); // Setting MySQL identity column

                b.Property<string>("City")
                    .IsRequired()
                    .HasColumnType("longtext"); // Setting the City property as required

                b.Property<string>("Country")
                    .IsRequired()
                    .HasColumnType("longtext"); // Setting the Country property as required

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("longtext"); // Setting the Email property as required

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("varchar(50)"); // Setting the Name property with max length as required

                b.Property<string>("PhotoPath")
                    .HasColumnType("longtext"); // Setting the PhotoPath property

                b.Property<string>("Street")
                    .IsRequired()
                    .HasColumnType("longtext"); // Setting the Street property as required

                b.HasKey("Id"); // Defining the primary key

                b.ToTable("Company"); // Mapping to the Company table
            });

            // Defining the DecodedData entity with its properties and configurations
            modelBuilder.Entity("LoRinoBackend.Models.DecodedData", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int"); // Setting the Id property with auto-increment

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id")); // Setting MySQL identity column

                b.Property<long>("Energy")
                    .HasColumnType("bigint"); // Setting the Energy property

                b.Property<double>("FlowRate")
                    .HasColumnType("double"); // Setting the FlowRate property

                b.Property<long>("FwdTemp")
                    .HasColumnType("bigint"); // Setting the FwdTemp property

                b.Property<int?>("LoRaDataId")
                    .HasColumnType("int"); // Setting the LoRaDataId property

                b.Property<long>("Power")
                    .HasColumnType("bigint"); // Setting the Power property

                b.Property<long>("RetTemp")
                    .HasColumnType("bigint"); // Setting the RetTemp property

                b.Property<double>("Volume")
                    .HasColumnType("double"); // Setting the Volume property

                b.HasKey("Id"); // Defining the primary key

                b.HasIndex("LoRaDataId"); // Defining an index on LoRaDataId

                b.ToTable("DecodedData"); // Mapping to the DecodedData table
            });

            // Defining the Device entity with its properties and configurations
            modelBuilder.Entity("LoRinoBackend.Models.Device", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int"); // Setting the Id property with auto-increment

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id")); // Setting MySQL identity column

                b.Property<int?>("CompanyId")
                    .HasColumnType("int"); // Setting the CompanyId property

                b.Property<string>("DevEui")
                    .IsRequired()
                    .HasColumnType("longtext"); // Setting the DevEui property as required

                b.Property<int?>("DeviceTypeId")
                    .HasColumnType("int"); // Setting the DeviceTypeId property

                b.Property<DateTime>("Expires")
                    .HasColumnType("datetime(6)"); // Setting the Expires property

                b.Property<double>("Lat")
                    .HasColumnType("double"); // Setting the Lat property

                b.Property<int>("LocationId")
                    .HasColumnType("int"); // Setting the LocationId property

                b.Property<double>("Long")
                    .HasColumnType("double"); // Setting the Long property

                b.Property<double>("MaxZoom")
                    .HasColumnType("double"); // Setting the MaxZoom property

                b.Property<double>("MinZoom")
                    .HasColumnType("double"); // Setting the MinZoom property

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("longtext"); // Setting the Name property as required

                b.HasKey("Id"); // Defining the primary key

                b.HasIndex("CompanyId"); // Defining an index on CompanyId

                b.HasIndex("DeviceTypeId"); // Defining an index on DeviceTypeId

                b.HasIndex("LocationId"); // Defining an index on LocationId

                b.ToTable("Device"); // Mapping to the Device table
            });

            // Defining the DeviceType entity with its properties and configurations
            modelBuilder.Entity("LoRinoBackend.Models.DeviceType", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int"); // Setting the Id property with auto-increment

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id")); // Setting MySQL identity column

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("longtext"); // Setting the Name property as required

                b.Property<string>("PhotoPath")
                    .HasColumnType("longtext"); // Setting the PhotoPath property

                b.HasKey("Id"); // Defining the primary key

                b.ToTable("DeviceType"); // Mapping to the DeviceType table
            });

            // Defining the EndDevice entity with its properties and configurations
            modelBuilder.Entity("LoRinoBackend.Models.EndDevice", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int"); // Setting the Id property with auto-increment

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id")); // Setting MySQL identity column

                b.Property<int?>("ClusterDataId")
                    .HasColumnType("int"); // Setting the ClusterDataId property

                b.Property<string>("DevAddr")
                    .HasColumnType("longtext"); // Setting the DevAddr property

                b.Property<string>("DevEui")
                    .HasColumnType("longtext"); // Setting the DevEui property

                b.HasKey("Id"); // Defining the primary key

                b.HasIndex("ClusterDataId"); // Defining an index on ClusterDataId

                b.ToTable("EndDevice"); // Mapping to the EndDevice table
            });

            // Defining the EventTagLog entity with its properties and configurations
            modelBuilder.Entity("LoRinoBackend.Models.EventTagLog", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int"); // Setting the Id property with auto-increment

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id")); // Setting MySQL identity column

                b.Property<string>("Action")
                    .HasColumnType("longtext"); // Setting the Action property

                b.Property<int>("EventId")
                    .HasColumnType("int"); // Setting the EventId property

                b.Property<string>("EventTagBy")
                    .HasColumnType("longtext"); // Setting the EventTagBy property

                b.Property<long>("EventTagTime")
                    .HasColumnType("bigint"); // Setting the EventTagTime property

                b.Property<int>("MoveeEventTagId")
                    .HasColumnType("int"); // Setting the MoveeEventTagId property

                b.HasKey("Id"); // Defining the primary key

                b.ToTable("EventTagLog"); // Mapping to the EventTagLog table
            });

            // Defining the GwInfo entity with its properties and configurations
            modelBuilder.Entity("LoRinoBackend.Models.GwInfo", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int"); // Setting the Id property with auto-increment

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id")); // Setting MySQL identity column

                b.Property<int?>("Altitude")
                    .HasColumnType("int"); // Setting the Altitude property

                b.Property<int?>("Channel")
                    .HasColumnType("int"); // Setting the Channel property

                b.Property<string>("GwEui")
                    .HasColumnType("longtext"); // Setting the GwEui property

                b.Property<double?>("Latitude")
                    .HasColumnType("double"); // Setting the Latitude property

                b.Property<int?>("LoRaDataId")
                    .HasColumnType("int"); // Setting the LoRaDataId property

                b.Property<double?>("Longitude")
                    .HasColumnType("double"); // Setting the Longitude property

                b.Property<int?>("RadioId")
                    .HasColumnType("int"); // Setting the RadioId property

                b.Property<string>("RfRegion")
                    .HasColumnType("longtext"); // Setting the RfRegion property

                b.Property<int?>("Rssi")
                    .HasColumnType("int"); // Setting the Rssi property

                b.Property<double?>("Snr")
                    .HasColumnType("double"); // Setting the Snr property

                b.HasKey("Id"); // Defining the primary key

                b.HasIndex("LoRaDataId"); // Defining an index on LoRaDataId

                b.ToTable("GwInfo"); // Mapping to the GwInfo table
            });

            // Defining the LoRaData entity with its properties and configurations
            modelBuilder.Entity("LoRinoBackend.Models.LoRaData", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int"); // Setting the Id property with auto-increment

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id")); // Setting MySQL identity column

                b.Property<bool>("Adr")
                    .HasColumnType("tinyint(1)"); // Setting the Adr property

                b.Property<bool?>("ClassB")
                    .HasColumnType("tinyint(1)"); // Setting the ClassB property

                b.Property<string>("CodingRate")
                    .HasColumnType("longtext"); // Setting the CodingRate property

                b.Property<bool?>("Confirmed")
                    .HasColumnType("tinyint(1)"); // Setting the Confirmed property

                b.Property<string>("DataRate")
                    .HasColumnType("longtext"); // Setting the DataRate property

                b.Property<bool?>("Delayed")
                    .HasColumnType("tinyint(1)"); // Setting the Delayed property

                b.Property<bool?>("Encrypted")
                    .HasColumnType("tinyint(1)"); // Setting the Encrypted property

                b.Property<int?>("EndDeviceDataId")
                    .HasColumnType("int"); // Setting the EndDeviceDataId property

                b.Property<int?>("FCntDown")
                    .HasColumnType("int"); // Setting the FCntDown property

                b.Property<int?>("FCntUp")
                    .HasColumnType("int"); // Setting the FCntUp property

                b.Property<int>("FPort")
                    .HasColumnType("int"); // Setting the FPort property

                b.Property<int?>("GwCnt")
                    .HasColumnType("int"); // Setting the GwCnt property

                b.Property<string>("Modulation")
                    .HasColumnType("longtext"); // Setting the Modulation property

                b.Property<string>("MsgId")
                    .HasColumnType("longtext"); // Setting the MsgId property

                b.Property<string>("Payload")
                    .HasColumnType("longtext"); // Setting the Payload property

                b.Property<long>("RecvTime")
                    .HasColumnType("bigint"); // Setting the RecvTime property

                b.Property<float?>("UlFrequency")
                    .HasColumnType("float"); // Setting the UlFrequency property

                b.HasKey("Id"); // Defining the primary key

                b.HasIndex("EndDeviceDataId"); // Defining an index on EndDeviceDataId

                b.ToTable("LoraData"); // Mapping to the LoraData table
            });

            // Defining the Location entity with its properties and configurations
            modelBuilder.Entity("LoRinoBackend.Models.Location", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int"); // Setting the Id property with auto-increment

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id")); // Setting MySQL identity column

                b.Property<int>("CompanyId")
                    .HasColumnType("int"); // Setting the CompanyId property

                b.Property<double>("Lat")
                    .HasColumnType("double"); // Setting the Lat property

                b.Property<double>("Long")
                    .HasColumnType("double"); // Setting the Long property

                b.Property<double>("MapZoom")
                    .HasColumnType("double"); // Setting the MapZoom property

                b.Property<double>("MaxZoom")
                    .HasColumnType("double"); // Setting the MaxZoom property

                b.Property<double>("MinZoom")
                    .HasColumnType("double"); // Setting the MinZoom property

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("varchar(50)"); // Setting the Name property with max length as required

                b.Property<string>("Road")
                    .IsRequired()
                    .HasColumnType("longtext"); // Setting the Road property as required

                b.Property<string>("RoadSection")
                    .IsRequired()
                    .HasColumnType("longtext"); // Setting the RoadSection property as required

                b.Property<int>("TimerLenght")
                    .HasColumnType("int"); // Setting the TimerLenght property

                b.HasKey("Id"); // Defining the primary key

                b.HasIndex("CompanyId"); // Defining an index on CompanyId

                b.ToTable("Location"); // Mapping to the Location table
            });

            // Defining the LocationUser entity with its properties and configurations
            modelBuilder.Entity("LoRinoBackend.Models.LocationUser", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int"); // Setting the Id property with auto-increment

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id")); // Setting MySQL identity column

                b.Property<int>("LocationId")
                    .HasColumnType("int"); // Setting the LocationId property

                b.Property<string>("UserId")
                    .HasColumnType("varchar(255)"); // Setting the UserId property

                b.HasKey("Id"); // Defining the primary key

                b.HasIndex("LocationId"); // Defining an index on LocationId

                b.HasIndex("UserId"); // Defining an index on UserId

                b.ToTable("LocationUser"); // Mapping to the LocationUser table
            });

            // Defining the MoveeDataFrame entity with its properties and configurations
            modelBuilder.Entity("LoRinoBackend.Models.MoveeDataFrame", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int"); // Setting the Id property with auto-increment

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id")); // Setting MySQL identity column

                b.Property<string>("AckId")
                    .HasColumnType("longtext"); // Setting the AckId property

                b.Property<bool>("AckMsg")
                    .HasColumnType("tinyint(1)"); // Setting the AckMsg property

                b.Property<long>("AckTime")
                    .HasColumnType("bigint"); // Setting the AckTime property

                b.Property<double>("Battery")
                    .HasColumnType("double"); // Setting the Battery property

                b.Property<int>("DataType")
                    .HasColumnType("int"); // Setting the DataType property

                b.Property<int>("DeviceId")
                    .HasColumnType("int"); // Setting the DeviceId property

                b.Property<string>("Guid")
                    .HasColumnType("longtext"); // Setting the Guid property

                b.Property<int>("Gx")
                    .HasColumnType("int"); // Setting the Gx property

                b.Property<int>("Gy")
                    .HasColumnType("int"); // Setting the Gy property

                b.Property<int>("Gz")
                    .HasColumnType("int"); // Setting the Gz property

                b.Property<int>("MoveeEventFrameId")
                    .HasColumnType("int"); // Setting the MoveeEventFrameId property

                b.Property<long>("RecvTime")
                    .HasColumnType("bigint"); // Setting the RecvTime property

                b.Property<double>("Temperature")
                    .HasColumnType("double"); // Setting the Temperature property

                b.HasKey("Id"); // Defining the primary key

                b.HasIndex("DeviceId"); // Defining an index on DeviceId

                b.HasIndex("MoveeEventFrameId"); // Defining an index on MoveeEventFrameId

                b.ToTable("MoveeDataFrame"); // Mapping to the MoveeDataFrame table
            });

            // Defining the MoveeEventComment entity with its properties and configurations
            modelBuilder.Entity("LoRinoBackend.Models.MoveeEventComment", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int"); // Setting the Id property with auto-increment

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id")); // Setting MySQL identity column

                b.Property<bool>("Active")
                    .HasColumnType("tinyint(1)"); // Setting the Active property

                b.Property<string>("Comment")
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnType("varchar(1000)"); // Setting the Comment property with max length as required

                b.Property<string>("EventCommentBy")
                    .HasColumnType("longtext"); // Setting the EventCommentBy property

                b.Property<long>("EventCommentTime")
                    .HasColumnType("bigint"); // Setting the EventCommentTime property

                b.Property<int>("MoveeEventFrameId")
                    .HasColumnType("int"); // Setting the MoveeEventFrameId property

                b.HasKey("Id"); // Defining the primary key

                b.HasIndex("MoveeEventFrameId"); // Defining an index on MoveeEventFrameId

                b.ToTable("MoveeEventComment"); // Mapping to the MoveeEventComment table
            });

            // Defining the MoveeEventFrame entity with its properties and configurations
            modelBuilder.Entity("LoRinoBackend.Models.MoveeEventFrame", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int"); // Setting the Id property with auto-increment

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id")); // Setting MySQL identity column

                b.Property<string>("AckMessage")
                    .HasColumnType("longtext"); // Setting the AckMessage property

                b.Property<int>("AlarmCount")
                    .HasColumnType("int"); // Setting the AlarmCount property

                b.Property<string>("ClearMessage")
                    .HasColumnType("longtext"); // Setting the ClearMessage property

                b.Property<string>("EventAckBy")
                    .HasColumnType("longtext"); // Setting the EventAckBy property

                b.Property<long>("EventAckTime")
                    .HasColumnType("bigint"); // Setting the EventAckTime property

                b.Property<string>("EventClearBy")
                    .HasColumnType("longtext"); // Setting the EventClearBy property

                b.Property<long>("EventClearTime")
                    .HasColumnType("bigint"); // Setting the EventClearTime property

                b.Property<long>("EventCreationTime")
                    .HasColumnType("bigint"); // Setting the EventCreationTime property

                b.Property<string>("Guid")
                    .HasColumnType("longtext"); // Setting the Guid property

                b.Property<bool>("IsAcked")
                    .HasColumnType("tinyint(1)"); // Setting the IsAcked property

                b.Property<bool>("IsCleared")
                    .HasColumnType("tinyint(1)"); // Setting the IsCleared property

                b.Property<int>("LocationId")
                    .HasColumnType("int"); // Setting the LocationId property

                b.Property<bool>("TimerIsEnded")
                    .HasColumnType("tinyint(1)"); // Setting the TimerIsEnded property

                b.HasKey("Id"); // Defining the primary key

                b.ToTable("MoveeEventFrame"); // Mapping to the MoveeEventFrame table

                // Inserting initial data into the MoveeEventFrame table
                b.HasData(
                    new
                    {
                        Id = 1,
                        AckMessage = "DummyEvent",
                        AlarmCount = 0,
                        ClearMessage = "DummyEvent",
                        EventAckBy = "",
                        EventAckTime = 0L,
                        EventClearBy = "",
                        EventClearTime = 0L,
                        EventCreationTime = 0L,
                        Guid = "",
                        IsAcked = false,
                        IsCleared = false,
                        LocationId = 0,
                        TimerIsEnded = false
                    });
            });

            // Defining the MoveeEventTag entity with its properties and configurations
            modelBuilder.Entity("LoRinoBackend.Models.MoveeEventTag", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int"); // Setting the Id property with auto-increment

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id")); // Setting MySQL identity column

                b.Property<bool>("Active")
                    .HasColumnType("tinyint(1)"); // Setting the Active property

                b.Property<int>("MoveeEventFrameId")
                    .HasColumnType("int"); // Setting the MoveeEventFrameId property

                b.Property<int>("MoveeTagId")
                    .HasColumnType("int"); // Setting the MoveeTagId property

                b.HasKey("Id"); // Defining the primary key

                b.HasIndex("MoveeEventFrameId"); // Defining an index on MoveeEventFrameId

                b.HasIndex("MoveeTagId"); // Defining an index on MoveeTagId

                b.ToTable("MoveeEventTag"); // Mapping to the MoveeEventTag table
            });

            // Defining the MoveeTag entity with its properties and configurations
            modelBuilder.Entity("LoRinoBackend.Models.MoveeTag", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int"); // Setting the Id property with auto-increment

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id")); // Setting MySQL identity column

                b.Property<bool>("Active")
                    .HasColumnType("tinyint(1)"); // Setting the Active property

                b.Property<int>("CompanyId")
                    .HasColumnType("int"); // Setting the CompanyId property

                b.Property<string>("Name")
                    .HasColumnType("longtext"); // Setting the Name property

                b.HasKey("Id"); // Defining the primary key

                b.ToTable("MoveeTag"); // Mapping to the MoveeTag table
            });

            // Defining the IdentityRole entity with its properties and configurations
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("varchar(255)"); // Setting the Id property

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("longtext"); // Setting the ConcurrencyStamp property as concurrency token

                b.Property<string>("Name")
                    .HasMaxLength(256)
                    .HasColumnType("varchar(256)"); // Setting the Name property with max length

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("varchar(256)"); // Setting the NormalizedName property with max length

                b.HasKey("Id"); // Defining the primary key

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex"); // Defining a unique index on NormalizedName with a custom name

                b.ToTable("AspNetRoles", (string)null); // Mapping to the AspNetRoles table
            });

            // Defining the IdentityRoleClaim entity with its properties and configurations
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int"); // Setting the Id property with auto-increment

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id")); // Setting MySQL identity column

                b.Property<string>("ClaimType")
                    .HasColumnType("longtext"); // Setting the ClaimType property

                b.Property<string>("ClaimValue")
                    .HasColumnType("longtext"); // Setting the ClaimValue property

                b.Property<string>("RoleId")
                    .IsRequired()
                    .HasColumnType("varchar(255)"); // Setting the RoleId property

                b.HasKey("Id"); // Defining the primary key

                b.HasIndex("RoleId"); // Defining an index on RoleId

                b.ToTable("AspNetRoleClaims", (string)null); // Mapping to the AspNetRoleClaims table
            });

            // Defining the IdentityUserClaim entity with its properties and configurations
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int"); // Setting the Id property with auto-increment

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id")); // Setting MySQL identity column

                b.Property<string>("ClaimType")
                    .HasColumnType("longtext"); // Setting the ClaimType property

                b.Property<string>("ClaimValue")
                    .HasColumnType("longtext"); // Setting the ClaimValue property

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("varchar(255)"); // Setting the UserId property

                b.HasKey("Id"); // Defining the primary key

                b.HasIndex("UserId"); // Defining an index on UserId

                b.ToTable("AspNetUserClaims", (string)null); // Mapping to the AspNetUserClaims table
            });

            // Defining the IdentityUserLogin entity with its properties and configurations
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("varchar(255)"); // Setting the LoginProvider property

                b.Property<string>("ProviderKey")
                    .HasColumnType("varchar(255)"); // Setting the ProviderKey property

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("longtext"); // Setting the ProviderDisplayName property

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("varchar(255)"); // Setting the UserId property

                b.HasKey("LoginProvider", "ProviderKey"); // Defining the composite primary key

                b.HasIndex("UserId"); // Defining an index on UserId

                b.ToTable("AspNetUserLogins", (string)null); // Mapping to the AspNetUserLogins table
            });

            // Defining the IdentityUserRole entity with its properties and configurations
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("varchar(255)"); // Setting the UserId property

                b.Property<string>("RoleId")
                    .HasColumnType("varchar(255)"); // Setting the RoleId property

                b.HasKey("UserId", "RoleId"); // Defining the composite primary key

                b.HasIndex("RoleId"); // Defining an index on RoleId

                b.ToTable("AspNetUserRoles", (string)null); // Mapping to the AspNetUserRoles table
            });

            // Defining the IdentityUserToken entity with its properties and configurations
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("varchar(255)"); // Setting the UserId property

                b.Property<string>("LoginProvider")
                    .HasColumnType("varchar(255)"); // Setting the LoginProvider property

                b.Property<string>("Name")
                    .HasColumnType("varchar(255)"); // Setting the Name property

                b.Property<string>("Value")
                    .HasColumnType("longtext"); // Setting the Value property

                b.HasKey("UserId", "LoginProvider", "Name"); // Defining the composite primary key

                b.ToTable("AspNetUserTokens", (string)null); // Mapping to the AspNetUserTokens table
            });

            // Navigation properties and foreign key constraints for ApplicationUser
            modelBuilder.Entity("LoRinoBackend.Models.ApplicationUser", b =>
            {
                b.HasOne("LoRinoBackend.Models.Company", "Company")
                    .WithMany()
                    .HasForeignKey("CompanyId")
                    .OnDelete(DeleteBehavior.Restrict); // Defining foreign key constraint and navigation property

                b.Navigation("Company"); // Defining navigation property
            });

            // Navigation properties and foreign key constraints for DecodedData
            modelBuilder.Entity("LoRinoBackend.Models.DecodedData", b =>
            {
                b.HasOne("LoRinoBackend.Models.LoRaData", "LoRaData")
                    .WithMany()
                    .HasForeignKey("LoRaDataId")
                    .OnDelete(DeleteBehavior.Restrict); // Defining foreign key constraint and navigation property

                b.Navigation("LoRaData"); // Defining navigation property
            });

            // Navigation properties and foreign key constraints for Device
            modelBuilder.Entity("LoRinoBackend.Models.Device", b =>
            {
                b.HasOne("LoRinoBackend.Models.Company", "Company")
                    .WithMany()
                    .HasForeignKey("CompanyId")
                    .OnDelete(DeleteBehavior.Restrict); // Defining foreign key constraint and navigation property

                b.HasOne("LoRinoBackend.Models.DeviceType", "DeviceType")
                    .WithMany()
                    .HasForeignKey("DeviceTypeId")
                    .OnDelete(DeleteBehavior.Restrict); // Defining foreign key constraint and navigation property

                b.HasOne("LoRinoBackend.Models.Location", "Location")
                    .WithMany()
                    .HasForeignKey("LocationId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired(); // Defining foreign key constraint and navigation property with required

                b.Navigation("Company"); // Defining navigation property

                b.Navigation("DeviceType"); // Defining navigation property

                b.Navigation("Location"); // Defining navigation property
            });

            // Navigation properties and foreign key constraints for EndDevice
            modelBuilder.Entity("LoRinoBackend.Models.EndDevice", b =>
            {
                b.HasOne("LoRinoBackend.Models.Cluster", "ClusterData")
                    .WithMany()
                    .HasForeignKey("ClusterDataId")
                    .OnDelete(DeleteBehavior.Restrict); // Defining foreign key constraint and navigation property

                b.Navigation("ClusterData"); // Defining navigation property
            });

            // Navigation properties and foreign key constraints for GwInfo
            modelBuilder.Entity("LoRinoBackend.Models.GwInfo", b =>
            {
                b.HasOne("LoRinoBackend.Models.LoRaData", null)
                    .WithMany("GwInfoData")
                    .HasForeignKey("LoRaDataId")
                    .OnDelete(DeleteBehavior.Restrict); // Defining foreign key constraint and navigation property
            });

            // Navigation properties and foreign key constraints for LoRaData
            modelBuilder.Entity("LoRinoBackend.Models.LoRaData", b =>
            {
                b.HasOne("LoRinoBackend.Models.EndDevice", "EndDeviceData")
                    .WithMany()
                    .HasForeignKey("EndDeviceDataId")
                    .OnDelete(DeleteBehavior.Restrict); // Defining foreign key constraint and navigation property

                b.Navigation("EndDeviceData"); // Defining navigation property
            });

            // Navigation properties and foreign key constraints for Location
            modelBuilder.Entity("LoRinoBackend.Models.Location", b =>
            {
                b.HasOne("LoRinoBackend.Models.Company", "Company")
                    .WithMany("Location")
                    .HasForeignKey("CompanyId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired(); // Defining foreign key constraint and navigation property with required

                b.Navigation("Company"); // Defining navigation property
            });

            // Navigation properties and foreign key constraints for LocationUser
            modelBuilder.Entity("LoRinoBackend.Models.LocationUser", b =>
            {
                b.HasOne("LoRinoBackend.Models.Location", null)
                    .WithMany("LocationUserList")
                    .HasForeignKey("LocationId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired(); // Defining foreign key constraint and navigation property with required

                b.HasOne("LoRinoBackend.Models.ApplicationUser", null)
                    .WithMany("LocationUserList")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Restrict); // Defining foreign key constraint and navigation property
            });

            // Navigation properties and foreign key constraints for MoveeDataFrame
            modelBuilder.Entity("LoRinoBackend.Models.MoveeDataFrame", b =>
            {
                b.HasOne("LoRinoBackend.Models.Device", "Device")
                    .WithMany()
                    .HasForeignKey("DeviceId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired(); // Defining foreign key constraint and navigation property with required

                b.HasOne("LoRinoBackend.Models.MoveeEventFrame", null)
                    .WithMany("MoveeDataFrames")
                    .HasForeignKey("MoveeEventFrameId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired(); // Defining foreign key constraint and navigation property with required

                b.Navigation("Device"); // Defining navigation property
            });

            // Navigation properties and foreign key constraints for MoveeEventComment
            modelBuilder.Entity("LoRinoBackend.Models.MoveeEventComment", b =>
            {
                b.HasOne("LoRinoBackend.Models.MoveeEventFrame", null)
                    .WithMany("MoveeEventComment")
                    .HasForeignKey("MoveeEventFrameId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired(); // Defining foreign key constraint and navigation property with required
            });

            // Navigation properties and foreign key constraints for MoveeEventTag
            modelBuilder.Entity("LoRinoBackend.Models.MoveeEventTag", b =>
            {
                b.HasOne("LoRinoBackend.Models.MoveeEventFrame", null)
                    .WithMany("MoveeEventTag")
                    .HasForeignKey("MoveeEventFrameId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired(); // Defining foreign key constraint and navigation property with required

                b.HasOne("LoRinoBackend.Models.MoveeTag", null)
                    .WithMany("MoveeEventTag")
                    .HasForeignKey("MoveeTagId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired(); // Defining foreign key constraint and navigation property with required
            });

            // Navigation properties and foreign key constraints for IdentityRoleClaim
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired(); // Defining foreign key constraint and navigation property
            });

            // Navigation properties and foreign key constraints for IdentityUserClaim
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("LoRinoBackend.Models.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired(); // Defining foreign key constraint and navigation property
            });

            // Navigation properties and foreign key constraints for IdentityUserLogin
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("LoRinoBackend.Models.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired(); // Defining foreign key constraint and navigation property
            });

            // Navigation properties and foreign key constraints for IdentityUserRole
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired(); // Defining foreign key constraint and navigation property

                b.HasOne("LoRinoBackend.Models.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired(); // Defining foreign key constraint and navigation property
            });

            // Navigation properties and foreign key constraints for IdentityUserToken
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("LoRinoBackend.Models.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired(); // Defining foreign key constraint and navigation property
            });

            // Navigation properties for ApplicationUser
            modelBuilder.Entity("LoRinoBackend.Models.ApplicationUser", b =>
            {
                b.Navigation("LocationUserList"); // Defining navigation property
            });

            // Navigation properties for Company
            modelBuilder.Entity("LoRinoBackend.Models.Company", b =>
            {
                b.Navigation("Location"); // Defining navigation property
            });

            // Navigation properties for LoRaData
            modelBuilder.Entity("LoRinoBackend.Models.LoRaData", b =>
            {
                b.Navigation("GwInfoData"); // Defining navigation property
            });

            // Navigation properties for Location
            modelBuilder.Entity("LoRinoBackend.Models.Location", b =>
            {
                b.Navigation("LocationUserList"); // Defining navigation property
            });

            // Navigation properties for MoveeEventFrame
            modelBuilder.Entity("LoRinoBackend.Models.MoveeEventFrame", b =>
            {
                b.Navigation("MoveeDataFrames"); // Defining navigation property

                b.Navigation("MoveeEventComment"); // Defining navigation property

                b.Navigation("MoveeEventTag"); // Defining navigation property
            });

            // Navigation properties for MoveeTag
            modelBuilder.Entity("LoRinoBackend.Models.MoveeTag", b =>
            {
                b.Navigation("MoveeEventTag"); // Defining navigation property
            });
#pragma warning restore 612, 618
        }
    }
}
