@{
    ViewBag.Title = "Vodovod Opuzen";
}
@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />

    <link href="https://cdn.jsdelivr.net/npm/leaflet.markercluster@1.5.3/dist/MarkerCluster.min.css" rel="stylesheet" />
    @* <link href="~/vendor/leaflet.markercluster/dist/MarkerCluster.Default.css" rel="stylesheet" /> *@

    @*<link href="~/vendor/jquery-toast-plugin/dist/jquery.toast.min.css" rel="stylesheet" />*@
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.5.2/css/tabulator_midnight.min.css" integrity="sha512-sJ8NPXesT4f4NxqfxdZoAmXwDO+ZHDv8wpHmjSmD44atJSUbG80PMEiPcBm16yJE1RjHTU74nizg/oyBz822qg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/flatpickr/4.6.13/flatpickr.min.css" integrity="sha512-MQXduO8IQnJVq1qmySpN87QQkiR1bZHtorbJBD0tzy7/0U9+YIC93QWHeGTEoojMVHWWNkoCp8V6OzVSYrX0oQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
            @*<link href="~/vendor/jsgrid/dist/jsgrid.css" rel="stylesheet" />
    <link href="~/vendor/jsgrid/dist/jsgrid-theme.css" rel="stylesheet" />*@

    <style>
        .mycluster {
            width: 40px;
            height: 40px;
            background-color: royalblue;
            text-align: center;
            font-size: 24px;
        }

        #spinner {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }


        #mapCreate {
            height: calc(100vh - 250px);
            min-height: 50vh;
        }

        #map {
            height: calc(100vh - 250px);
            min-height: 50vh;
        }

        .custom-popup .leaflet-popup-content-wrapper {
            background: #2c3e50;
            color: #fff;
            font-size: 16px;
            line-height: 24px;
        }

            .custom-popup .leaflet-popup-content-wrapper a {
                color: rgba(255,255,255,0.5);
            }

        .custom-popup .leaflet-popup-tip-container {
            width: 30px;
            height: 15px;
        }

        .custom-popup .leaflet-popup-tip {
            background: #2c3e50;
            margin-left: 12px;
        }

        .info {
            padding: 6px 8px;
            font: 14px/16px Arial, Helvetica, sans-serif;
            background: white;
            background: rgba(255,255,255,0.8);
            box-shadow: 0 0 15px rgba(0,0,0,0.2);
            border-radius: 5px;
            line-height: 24px;
        }

            .info h4 {
                margin: 0 0 5px;
                color: #777;
            }

        .legend {
            text-align: left;
            line-height: 18px;
            color: #555;
        }

            .legend i {
                width: 18px;
                height: 18px;
                float: left;
                margin-right: 8px;
                opacity: 0.7;
            }
    </style>
}

<div class="row justify-content-center p-1 m-0">
    <div class="col-sm-5 p-1">
        <div class="card shadow">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <div class="float-left"><h6 class="m-0 font-weight-bold text-primary">Karta</h6></div>
                <div id="signalStatus" class="btn-circle float-right bg-success"></div>
            </div>
            <div class="card-body">
                <div class="" style="z-index: 0" id="map"></div>
            </div>
        </div>
    </div>
    <div class="col-sm-7 p-1">
        <div class="card shadow">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <div class="float-left">
                    <h6 class="m-0 font-weight-bold text-primary">Uređaji</h6>
                </div>
                <div>
                    <button id="download-csv">Download CSV</button>
                    <button id="download-json">Download JSON</button>
                    <button id="download-xlsx">Download XLSX</button>
                    <button id="download-pdf">Download PDF</button>
                    <button id="download-html">Download HTML</button>
                </div>
                <div style="padding-bottom: 10px; float: right; right: 50px; padding-right: 10px; display:flex;">
                    <input id="selector" placeholder="Odaberite vrijeme..." style="border-bottom-left-radius: 12px; border-top-left-radius: 12px;" type="hidden" name="datee" class="flatpickr-input">
                    <input class="btn-large btn-secondary" style="border-bottom-right-radius: 12px; border-top-right-radius: 12px;" type="submit" id="btnSubmit" onclick="preuzmiCSV()" value="Preuzmi CSV">
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    @*<table id="jsGrid" class="jsGrid"></table>*@
                    <div id="example" class="table"></div>
                </div>
            </div>
        </div>
    </div>

</div>

<!-- Collapse button -->
<button class="navbar-toggler toggler-example" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent1"
        aria-controls="navbarSupportedContent1" aria-expanded="false" aria-label="Toggle navigation">
    <span class="dark-blue-text">
        <i class="fas fa-bars fa-1x"></i>
    </span>
</button>

<!-- Collapsible content -->
<div class="collapse navbar-collapse row justify-content-center pb-5" id="navbarSupportedContent1" style="width:100%; bottom: 0px; position: sticky;">
    <div class="col-sm-12 p-2">
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <div class="float-left"><h6 class="m-0 font-weight-bold text-primary">Log</h6></div>


                <div id="signalStatus" class="btn-circle float-right bg-danger"></div>
            </div>
            <div class="card-body logWindow" id="logWindow"></div>
        </div>
    </div>
</div>
@*<button id="a" class="button"> a </button>*@
@section Scripts {
    <script src="https://unpkg.com/leaflet@1.3.4/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/leaflet.markercluster@1.5.3/dist/leaflet.markercluster.min.js"></script>
    @* <script src="~/vendor/jquery-toast-plugin/dist/jquery.toast.min.js"></script> *@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.5.2/js/tabulator.min.js" integrity="sha512-oU2NOn7vXb9igwNelYL+57+t+zb3liitNE8/NXg8QFJhBCSvH+dt9+s3H02aM41FUF7WYWx0kPeFV5yIkm1MVA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    @* <script type="text/javascript" src="~/vendor/tabulator-tables/dist/js/tabulator.min.js"></script> *@
    @*<script type="text/javascript" src=" ~/vendor/jquery-steps/build/jquery.steps.min.js"></script>
    <script type="text/javascript" src="~/js/wizard.js"></script> *@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flatpickr/4.6.13/flatpickr.min.js" integrity="sha512-K/oyQtMXpxI4+K0W7H25UopjM8pzq0yrVdFdG21Fh5dBe91I40pDd9A4lzNlHPHBIP2cwZuoxaUSX0GJSObvGA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script type="text/javascript" src="https://oss.sheetjs.com/sheetjs/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.20/jspdf.plugin.autotable.min.js"></script>

    <script>

        var json = [];

        var optional_config = {

            enableTime: true,
            time_24hr: true,
            altInput: true,
            dateFormat: "Z",
            //altFormat: "d.m.Y H:m:s",
            altFormat: "F j, Y H:i",
            maxDate: Date.now(),
            locale: "hr",
        }

        var kalendar = $("#selector").flatpickr(optional_config);

        // Inicijalizacija, dohvaćanje lokacija s GET zahtjevom i vraćanje podataka
        function LoadData(datum) {

            if (datum == null) {
                var datum = Date.now();
            }
            return $.ajax({
                type: "GET",
                url: "~/Device/DevicesInfo",
                data: "ts=" + datum,
                async: false,
                beforeSend: function () {
                    // Prije slanja se pokazuje ikona za učitavanje
                    $("body").append("<div id='spinner' class='spinner-grow' role='status'></div>");
                    //<i class='fa fa-spinner fa-spin'></i>
                },
                success: function (data) {
                    // Poslije slanja se uklanja ikona za učitavanje
                    $(".spinner-grow").remove();

                    // Ukoliko zahtjev uspije, vraća se data
                    return data;
                },
                failure: function (jqXHR, textStatus, errorThrown) {
                    alert("HTTP Status: " + jqXHR.status + "; Error Text: " + jqXHR.responseText); // Display error message
                }
            });
        }

        // Učitavanje varijable json s funkcijom koja vraća JSON s podacima
        json = LoadData().responseJSON;

        // Extend Tabulator prototype to deselect all rows except the given row
        Tabulator.prototype.deselectRowsExcept = function (row) {
            var selectedRows = this.getSelectedRows();

            selectedRows.forEach(function (selectedRow) {
                if (selectedRow !== row) {
                    selectedRow.deselect();
                }
            });
        };

        // Extend Tabulator prototype to get row by ID
        Tabulator.prototype.getRowFromId = function (id) {
            var rows = this.rowManager.getRows();

            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];
                if (row.getData().id === id) {
                    return row;
                }
            }

            return null;
        };

        var table = new Tabulator("#example", {
            reactiveData: true,
            data: json,
            columns: [
                {
                    "field": "Name", "title": "Naziv",
                    formatter: function (cell, formatterParams, onRendered) {
                        var name = cell.getValue();
                        var devEui = cell.getRow().getData().DevEui;
                        // Create the link using HTML markup
                        var link = "<a href='~/Device/Details?Id=" + devEui + "'>" + name + "</a>";
                        return link;
                    },
                },
                {
                    "field": "RSSI", "title": "RSSI",
                    formatter: function (cell, formatterParams, onRendered) {
                        var value = cell.getValue();
                        if (isNaN(value)) {
                            return "N/A"; // Display a custom message for NaN values
                        } else {
                            // Divide the value by 1000 and format as "LasPulse m³"
                            var formattedValue = (value / 1000) + " m<sup>3</sup>";
                            return formattedValue;
                        }
                    },
                },
                { "field": "RecvTime", "title": "Posljednja poruka" },
                { "field": "SNR", "title": "SNR" },
                { "field": "Count", "title": "Ukupno poruka" }
            ],
            pagination: true,
            height: "calc(100vh - 250px)",
            layout: "fitColumns", //fit columns to width of table (optional)
            langs: {
                "hr-HR": {
                    columns: {
                        name: "Ime", //replace the title of column name with the value "Name"
                    },
                    data: {
                        loading: "Učitavanje", //data loader text
                        error: "Error", //data error text
                    },
                    groups: {
                        //copy for the auto generated item count in group header
                        item: "item", //the singular  for item
                        items: "items", //the plural for items
                    },
                    pagination: {
                        page_size: "Vel.", //label for the page size select element
                        page_title: "Prikaži", //tooltip text for the numeric page button, appears in front of the page number (eg. "Show Page" will result in a tool tip of "Show Page 1" on the page 1 button)
                        first: "Prva", //text for the first page button
                        first_title: "Prva str.", //tooltip text for the first page button
                        last: "Zadnja",
                        last_title: "Zadnja str.",
                        prev: "Prije",
                        prev_title: "Prije str.",
                        next: "Iduća",
                        next_title: "Iduća str.",
                        all: "Sve",
                        counter: {
                            showing: "Prikaz",
                            of: "od",
                            rows: "redaka",
                            pages: "str.",
                        },
                    },
                    headerFilters: {
                        default: "filter column...", //default header filter placeholder text
                        columns: {
                            name: "filter name...", //replace default header filter text for column name
                        },
                    },
                },
            },
            locale: true,
            selectable: true,
            selectableRangeMode: "click", // Allow selection by clicking
            rowSelectionChanged: function (row, isSelected) {
                if (isSelected) {
                    table.deselectRowsExcept(row); // Deselect all other rows
                    highlightRowAndFocusPage(row);
                }
            }
            //rowClick: this.handleRowClick,

            // Other Tabulator options
        });
        table.on("rowClick", (e, row) => {
            const rowData = row.getData();
            console.log("Selected row data:", rowData);
            // Call your function or perform any desired actions with the row data
            Sasa(rowData.Name, rowData.Lat, rowData.Long);
        });

        // Highlight the selected row and focus on the corresponding page
        function highlightRowAndFocusPage(row) {
            row.getElement().classList.add("tabulator-selected");
            table.deselectRowsExcept(row);
            row.component.pageTo();
        }

        // Inicijalizacija mape s određenim pogledom
        var mapCenter = [44.5, 17];

        // Postavljanje slojeva
        var atrML = 'Powered by <a href="http://www.microlink.hr" > Micro-Link</a>';
        var OpenStreetMap = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: atrML,
            maxZoom: 19
        });

        var googleStreets = L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
            attribution: atrML,
            maxZoom: 21,
            subdomains: ['mt0', 'mt1', 'mt2', 'mt3']
        });

        var mapbox = L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
            attribution: atrML,
            maxZoom: 23,
            id: 'mapbox/streets-v11',
            tileSize: 512,
            zoomOffset: -1,
            accessToken: 'pk.eyJ1IjoianVrYTk3IiwiYSI6ImNrdTZxcng5eTN2c2IycHF0cnE1Zno5cHcifQ.gfrbRhNsX6XJOZywD-kSSw'
        });

        var Stadia_AlidadeSmoothDark = L.tileLayer('https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png', {
            attribution: atrML,
            maxZoom: 20
        });

        var OpenTopoMap = L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
            attribution: atrML,
            maxZoom: 20
        });

        var CyclOSM = L.tileLayer('https://{s}.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png', {
            attribution: atrML,
            maxZoom: 20
        });

        var baseMaps = {
            "Open Street Map": OpenStreetMap,
            "Google streets": googleStreets,
            "Map Box": mapbox,
            "Stadia Dark": Stadia_AlidadeSmoothDark,
            "OpenTopoMap": OpenTopoMap,
            "CyclOSM": CyclOSM
        }

        // Dodavanje sloja na mapu
        var _mapa = L.map('map', { center: mapCenter, zoom: 6, layers: baseMaps["Open Street Map"] });

        // Dodavanje kontrole za slojeve, dolje lijevo
        L.control.layers(baseMaps).addTo(_mapa).setPosition("bottomleft");

        // Legenda alarma, gore desno
        var legend = L.control({
            position: 'topright'
        });

        // Stvaranje grupe markera (sloj)
        var markersGroup = new L.MarkerClusterGroup(
            {
                //iconCreateFunction: function (cluster) {
                //    return L.divIcon({ html: '<b>' + cluster.getChildCount() +'<b>', iconSize: L.point(40, 40), className: 'marker-cluster mycluster' });
                //},
                //iconCreateFunction: function(cluster) {
                //    return greenIcon;
                //},
                //icon = (el.cntAlarm > 0 ? redIcon : greenIcon),
                spiderfyOnMaxZoom: false, // onemogućuje prikazivanje uređaja u obliku mreže kod maksimalnog zumiranja
                disableClusteringAtZoom: 16 // onemogućuje klasteriranje na zumiranju razine 16
            });

        // Funkcija koja se izvršava kod klika na mapu
        // Ova specifično odabire podatak u tablici koji je kliknut na mapi i odznačava ostale
        function markerOnClick(e) {
            var row = table.getRowFromId(e.target.options.name);
            console.log(row);
            if (row) {
                
            }
        }

        // Funkcija učitavanje podataka u sloj grupe markera
        async function loadMap(json) {
            json.forEach((el) => {
                var marker = L.marker(new L.LatLng(el.Lat, el.Long), { title: el.Name, id: el.DevEui }).on('click', markerOnClick);
                var customPopup = "<div style=\"line-height: 2rem\">" +
                    "<h3 style=\"margin:0\">" + (el.Name != null ? el.Name : "No name") + "</h2>" +
                    //"<br><h4><b>Stanje: </b><span class=\"\">" + (el.LastPulse != null ? el.LastPulse / 1000 : "-") + " m<sup>3</sup></span></h4>" +
                    //"<br><b>Zadnja poruka: </b><span class=\"\">" + (el.LastTime != null ? el.LastTime : "") + "</span>" +
                    "<br>" +
                    "<br><input class=\"btn btn-default\" style=\"max-width: 10vw\" type=\"button\" value=\"Detalji\" onclick=\"window.open(\'" + '~/Device/Details?Id=' + el.DevEui + "\', true)\"></button>" +
                    "</div>";
                marker.bindPopup(customPopup);
                markersGroup.addLayer(marker);
            });
            _mapa.addLayer(markersGroup);
        }

        loadMap(json);

        function popup(name) {
            var m = markersGroup.getLayers();
            for (var i in m) {
                if (m[i].options.title == name) {
                    m[i].openPopup();
                }
            }
        }

        // Funkcija za zumiranje na određeni marker s parametrima id, lat, lng
        function Sasa(id, lat, lng) {
            _mapa.flyTo([lat, lng], 17, {
                duration: 2.25, // Animation duration in seconds
                easeLinearity: 0.75, // Animation smoothness
            });
            setTimeout(popup(id), 2250);
        }

        //trigger download of data.csv file
        document.getElementById("download-csv").addEventListener("click", function () {
            table.download("csv", "data.csv");
        });

        //trigger download of data.json file
        document.getElementById("download-json").addEventListener("click", function () {
            table.download("json", "data.json");
        });

        //trigger download of data.xlsx file
        document.getElementById("download-xlsx").addEventListener("click", function () {
            table.download("xlsx", "data.xlsx", { sheetName: "My Data" });
        });

        //trigger download of data.pdf file
        document.getElementById("download-pdf").addEventListener("click", function () {
            table.download("pdf", "data.pdf", {
                orientation: "portrait", //set page orientation to portrait
                title: "Example Report", //add title to report
            });
        });

        //trigger download of data.html file
        document.getElementById("download-html").addEventListener("click", function () {
            table.download("html", "data.html", { style: true });
        });

    </script>

    <!--LEAFLET SCRIPT-->
    <!-- za Modal stvaranja nove lokacije -->
@* 
    <script>
        // Inicijalizacija mape s određenim pogledom
        var mapCenter = [44.5, 16];
        var mapa = L.map('mapCreate').setView(mapCenter, 6);

        // Postavljanje slojeva
        var atrML = 'Powered by <a href="http://www.microlink.hr" > Micro-Link</a>';
        var OpenStreetMap = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: atrML,
            maxZoom: 19
        });

        var googleStreets = L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
            attribution: atrML,
            maxZoom: 21,
            subdomains: ['mt0', 'mt1', 'mt2', 'mt3']
        });

        var mapbox = L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
            attribution: atrML,
            maxZoom: 23,
            id: 'mapbox/streets-v11',
            tileSize: 512,
            zoomOffset: -1,
            accessToken: 'pk.eyJ1IjoianVrYTk3IiwiYSI6ImNrdTZxcng5eTN2c2IycHF0cnE1Zno5cHcifQ.gfrbRhNsX6XJOZywD-kSSw'
        });

        var Stadia_AlidadeSmoothDark = L.tileLayer('https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png', {
            attribution: atrML,
            maxZoom: 20
        });

        var OpenTopoMap = L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
            attribution: atrML,
            maxZoom: 20
        });

        var CyclOSM = L.tileLayer('https://{s}.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png', {
            attribution: atrML,
            maxZoom: 20
        });

        var baseMaps = {
            "Open Street Map": OpenStreetMap,
            "Google streets": googleStreets,
            "Map Box": mapbox,
            "Stadia Dark": Stadia_AlidadeSmoothDark,
            "OpenTopoMap": OpenTopoMap,
            "CyclOSM": CyclOSM
        }

        // Dodavanje sloja na mapu
        OpenStreetMap.addTo(mapa);

        // Dodavanje kontrole za slojeve, dolje lijevo
        L.control.layers(baseMaps).addTo(mapa).setPosition("bottomleft");

        // Legenda alarma, gore desno
        var legend = L.control({
            position: 'topright'
        });

        // Inicijalizacija markera
        var marker = new L.marker(mapCenter, {
            draggable: true,
            autoPan: true
        }).addTo(mapa);

        // Funkcija za ažuriranje lokacije markera
        var updateMarker = function (lat, lng) {
            //console.log(lat, " ", lng)
            marker.setLatLng([lat, lng])
            //.bindPopup("Your location :  " + marker.getLatLng().toString())
            //.openPopup();
            return false;
        };

        var updateMarkerByInputs = function () {
            GetLocationDetails($('#Latitude').val(), $('#Longitude').val());
            return updateMarker($('#Latitude').val(), $('#Longitude').val());
        }
        function updateTextbox(lat, lng) {
            $('#Latitude').val(String(lat));
            $('#Longitude').val(String(lng));
        }

        // Kod završetka povlačenja markera
        // poziva se funkcija za ažuriranje vrijednosti u textboxu (updateTextbox)
        // isto tako poziva funkciju za dobivanje detalja o lokacijama (GetLocationDetails)
        marker.on("dragend", function (e) {
            updateTextbox(e.target.getLatLng().lat.toFixed(6), e.target.getLatLng().lng.toFixed(6));
            //console.log(e.target.getLatLng().lat.toFixed(6), e.target.getLatLng().lng.toFixed(6));
            GetLocationDetails(e.target.getLatLng().lat.toFixed(6), e.target.getLatLng().lng.toFixed(6));
        });

        // Kod završetka povlačenja markera
        // poziva se funkcija za ažuriranje vrijednosti u textboxu (updateTextbox)
        // ažurira marker (updateMarker)
        // isto tako poziva funkciju za dobivanje detalja o lokacijama (GetLocationDetails)
        mapa.on('click', function (e) {
            updateTextbox(e.latlng.lat.toFixed(6), e.latlng.lng.toFixed(6));
            updateMarker(e.latlng.lat, e.latlng.lng);
            GetLocationDetails(e.latlng.lat.toFixed(6), e.latlng.lng.toFixed(6));
        });

        // Kod upisa Longitude ili Latitude vrijednosti u prikladni textbox, ažurira se marker
        $('#Longitude').on('input', updateMarkerByInputs);
        $('#Latitude').on('input', updateMarkerByInputs);

        $(document).ready(function () {
            $('.custom-file-input').on("change", function () {
                var fileName = $(this).val().split("\\").pop();
                $(this).next('.custom-file-label').html(fileName);
            });
        });

        // Dobiva detalje lokacije
        // prenosi lat i lng vrijednosti
        // sukladnom tome radi GET zahtjev
        // vraća i ažurira poznate vrijednosti
        // function GetLocationDetails(lat, lng) {
        //     var requestOptions = {
        //         method: 'GET',
        //     };
        //     let customUrl = "https://api.geoapify.com/v1/geocode/reverse?lat=" + lat + "&lon=" + lng + "&apiKey=86510586fe1e4a049ccf998716dc5d70"
        //     fetch(customUrl, requestOptions)
        //         .then(response => response.json())
        //         .then(result => {
        //             const { features } = result;
        //             if (features && features.length > 0) {
        //                 const feature = features[0];
        //                 const { properties } = feature;
        //                 if (properties) {
        //                     const { name, street, housenumber, formatted, city, country } = properties;
        //                     if (name) {
        //                         document.getElementById("Name").value = name;
        //                     } else {
        //                         if (formatted) {
        //                             document.getElementById("Name").value = formatted;
        //                         }
        //                     }
        //                     if (street) {
        //                         let Adresa = street;
        //                         if (housenumber) {
        //                             Adresa += " " + housenumber;
        //                         }
        //                         document.getElementById("Address").value = Adresa
        //                     }
        //                     if (city) {
        //                         document.getElementById("City").value = city;
        //                     }
        //                     if (country) {
        //                         document.getElementById("Country").value = country;
        //                     }
        //                 }
        //             }
        //         });
        // }


        // Get the textbox element and the Leaflet map object
        const zoomField = document.getElementById('MapZoom');

        mapa.on('zoomend', function () {

            $('#MapZoom').val(String(mapa.getZoom()));

        });

        // Add your map layers and other configurations here...

        // Set up an event listener for when the textbox value changes
        zoomField.addEventListener('input', function () {
            // Get the value from the textbox and parse it as a number
            var zoomValue = parseInt(zoomField.value);
            if (isNaN(zoomValue)) return; // Exit if the value is not a number

            // Check that the zoom value is within the valid range for your map
            const maxZoom = mapa.getMaxZoom();
            const minZoom = mapa.getMinZoom();
            if (zoomValue < minZoom || zoomValue > maxZoom) return;

            // Set the new zoom level and optionally animate the zoom
            mapa.flyTo(marker.getLatLng(), zoomValue, {
                duration: 1.5, // Animation duration in seconds
                easeLinearity: 0.5, // Animation smoothness
            });
        });

        //This code listens for changes in the textbox field using the input event and updates the map's zoom level accordingly.
        //The flyTo() method is used to smoothly animate the zoom to the new level over 1.5 seconds with a smoothness factor of 0.5.
        //You can adjust these animation settings as needed.


        var timeStamp;
        var tempDate, timeStamp;
        var newJson;
        kalendar.config.onChange.push(function (selectedDates, dateStr, instance) {
            //var x =
            timeStamp = selectedDates[0].valueOf();
            console.log(timeStamp);
            newJson = LoadData(timeStamp).responseJSON;
            table.replaceData(newJson);

            markersGroup.clearLayers();
            loadMap(newJson);
        });

        // function preuzmiCSV() {
        //     var datum;
        //     if (kalendar.selectedDates[0] == null) {
        //         datum = Date.now();
        //     } else {
        //         datum = kalendar.selectedDates[0].valueOf();
        //     }
        //     var j = { ts: datum };
        //     return $.ajax({
        //         type: "POST",
        //         url: "/WaterMeter/Export",
        //         data: j,
        //         async: false,
        //         beforeSend: function () {
        //             // Prije slanja se pokazuje ikona za učitavanje
        //             $("body").append("<div id='spinner' class='spinner-grow' role='status'></div>");
        //             //<i class='fa fa-spinner fa-spin'></i>
        //         },
        //         success: function (data) {
        //             // Poslije slanja se uklanja ikona za učitavanje
        //             $(".spinner-grow").remove();

        //             // Ukoliko zahtjev uspije, vraća se data
        //             return data;
        //         },
        //         failure: function (jqXHR, textStatus, errorThrown) {
        //             $(".spinner-grow").remove();
        //             alert("HTTP Status: " + jqXHR.status + "; Error Text: " + jqXHR.responseText); // Display error message
        //         }
        //     });
        //     return true;
        // }

    </script> *@
@* 
    <script>
        function submitForm() {
            const form = document.getElementById("locationForm");
            const data = {
                name: form.elements["Name"].value,
                country: form.elements["Country"].value,
                city: form.elements["City"].value,
                address: form.elements["Address"].value,
                long: parseFloat(form.elements["Longitude"].value),
                lat: parseFloat(form.elements["Latitude"].value),
                mapZoom: parseFloat(form.elements["mapZoom"].value),
                photoPath: form.elements["photoPath"].value,
            };

            const xhr = new XMLHttpRequest();
            xhr.open("POST", "/api/locations", true);
            xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
            xhr.onload = function () {
                if (xhr.status >= 200 && xhr.status < 400) {
                    const response = JSON.parse(xhr.responseText);
                    //$(".content-wrapper").prepend("<div class='alert alert-success'>Uspješno ste stvorili novu lokaciju!</div>");
                    //$("#example-modal").modal("hide");
                    loadMap(GetLocations().responseJSON);
                    showSuccessToast('Uspješno ste stvorili novu lokaciju!');
                    $('#exampleModal').modal('hide')
                    //$(".card").prepend("<div style='align-content: center; text-color:green;'>Uspješno ste stvorili novu lokaciju!</div>");
                    //$(".card").prepend(response);
                    Sasa(response.id, response.lat, response.long);
                } else {
                    showDangerToast('Greška' + response);
                    console.error(xhr.responseText);
                }
            };
            xhr.onerror = function () {
                console.error(xhr.responseText);
            };
            xhr.send(JSON.stringify(data));
        }
    </script> *@

    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/wanesy.js"></script>
}